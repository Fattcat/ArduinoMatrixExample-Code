// ......................................
// ........> YouTube
// ................> 
// ........................>
// ................>
// ........>
// ......................................

// Edited By Dominik Hulin A.K.A. Fattcat



#include <LedControl.h>

int DIN = 10;
int CS = 9;
int CLK = 8;

LedControl lc = LedControl(DIN, CLK, CS, 0);

void setup() {
  lc.shutdown(0, false);
  lc.setIntensity(0, 1);  //Adjust the brightness maximum is 15
  lc.clearDisplay(0);
}

void loop() 
{

           
           // TERAZ IDE IXSKO "X"
  //byte X001[] = {B10000001,B01000010,B00100100,B00011000,B00011000,B00100100,B01000010,B10000001};
  byte X002[] = {B00000001,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000001};
  byte X003[] = {B00000010,B00000001,B00000000,B00000000,B00000000,B00000000,B00000001,B00000010};
  byte X004[] = {B00000100,B00000010,B00000001,B00000000,B00000000,B00000001,B00000010,B00000100};
  byte X005[] = {B00001000,B00000100,B00000010,B00000001,B00000001,B00000010,B00000100,B00001000};
  byte X006[] = {B00010000,B00001000,B00000100,B00000011,B00000011,B00000100,B00001000,B00010000};
  byte X007[] = {B00100000,B00010000,B00001001,B00000110,B00000110,B00001001,B00010000,B00100000};
  byte X008[] = {B01000000,B00100001,B00010010,B00001100,B00001100,B00010010,B00100001,B01000000};
  byte X009[] = {B10000001,B01000010,B00100100,B00011000,B00011000,B00100100,B01000010,B10000001};
  byte X010[] = {B00000010,B10000100,B01001000,B00110000,B00110000,B01001000,B10000100,B00000010};
  byte X011[] = {B00000100,B00001000,B10010000,B01100000,B01100000,B10010000,B00001000,B00000100};
  byte X012[] = {B00001000,B00010000,B00100000,B11000000,B11000000,B00100000,B00010000,B00001000};
  byte X013[] = {B00010000,B00100000,B01000000,B10000000,B10000000,B01000000,B00100000,B00010000};
  byte X014[] = {B00100000,B01000000,B10000000,B00000000,B00000000,B10000000,B01000000,B00100000};
  byte X015[] = {B01000000,B10000000,B00000000,B00000000,B00000000,B00000000,B10000000,B01000000};
  byte X016[] = {B10000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B10000000};
  byte X017[] = {B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000};
           
           // TERAZ IDE "KRUH"
  byte CIRCLE001[] = {B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000};
  byte CIRCLE002[] = {B00000000,B00000000,B00000001,B00000001,B00000001,B00000001,B00000000,B00000000};
  byte CIRCLE003[] = {B00000000,B00000001,B00000010,B00000010,B00000010,B00000010,B00000001,B00000000};
  byte CIRCLE004[] = {B00000001,B00000010,B00000100,B00000100,B00000100,B00000100,B00000010,B00000001};
  byte CIRCLE005[] = {B00000011,B00000100,B00001000,B00001000,B00001000,B00001000,B00000100,B00000010};
  byte CIRCLE006[] = {B00000111,B00001000,B00010000,B00010000,B00010000,B00010000,B00001000,B00000111};
  byte CIRCLE007[] = {B00001111,B00010000,B00100000,B00100000,B00100000,B00100000,B00010000,B00001111};
  byte CIRCLE008[] = {B00011110,B00100001,B01000000,B01000000,B01000000,B01000000,B00100001,B00011110};
  byte CIRCLE009[] = {B00111100,B01000010,B10000001,B10000001,B10000001,B10000001,B01000010,B00111100};
  byte CIRCLE010[] = {B01111000,B10000100,B00000010,B00000010,B00000010,B00000010,B10000100,B01111000};
  byte CIRCLE011[] = {B11110000,B00001000,B00000100,B00000100,B00000100,B00000100,B00001000,B11110000};
  byte CIRCLE012[] = {B11100000,B00010000,B00001000,B00001000,B00001000,B00001000,B00010000,B11100000};
  byte CIRCLE013[] = {B11000000,B00100000,B00010000,B00010000,B00010000,B00010000,B00100000,B11000000};
  byte CIRCLE014[] = {B10000000,B01000000,B00100000,B00100000,B00100000,B00100000,B01000000,B10000000};
  byte CIRCLE015[] = {B10000000,B01000000,B01000000,B01000000,B01000000,B01000000,B01000000,B10000000};
  byte CIRCLE016[] = {B00000000,B00000000,B10000000,B10000000,B10000000,B10000000,B00000000,B00000000};
  byte CIRCLE017[] = {B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000};

      // TERAZ IDE "ŠTVOREC"
   byte SQUARE001[] = {B00000001,B00000001,B00000001,B00000001,B00000001,B00000001,B00000001,B00000001};
   byte SQUARE002[] = {B00000011,B00000010,B00000010,B00000010,B00000010,B00000010,B00000010,B00000011};
   byte SQUARE003[] = {B00000111,B00000100,B00000100,B00000100,B00000100,B00000100,B00000100,B00000111};
   byte SQUARE004[] = {B00001111,B00001000,B00001000,B00001000,B00001000,B00001000,B00001000,B00001111};
   byte SQUARE005[] = {B00011111,B00010000,B00010000,B00010000,B00010000,B00010000,B00010000,B00011111};
   byte SQUARE006[] = {B00111111,B00100000,B00100000,B00100000,B00100000,B00100000,B00100000,B00111111};
   byte SQUARE007[] = {B01111111,B01000000,B01000000,B01000000,B01000000,B01000000,B01000000,B01111111};
   byte SQUARE008[] = {B11111111,B10000001,B10000001,B10000001,B10000001,B10000001,B10000001,B11111111};
   byte SQUARE009[] = {B11111110,B00000010,B00000010,B00000010,B00000010,B00000010,B00000010,B11111110};
   byte SQUARE010[] = {B11111100,B00000100,B00000100,B00000100,B00000100,B00000100,B00000100,B11111100};
   byte SQUARE011[] = {B11111000,B00001000,B00001000,B00001000,B00001000,B00001000,B00001000,B11111000};
   byte SQUARE012[] = {B11110000,B00010000,B00010000,B00010000,B00010000,B00010000,B00010000,B11110000};
   byte SQUARE013[] = {B11100000,B00100000,B00100000,B00100000,B00100000,B00100000,B00100000,B11100000};
   byte SQUARE014[] = {B11000000,B01000000,B01000000,B01000000,B01000000,B01000000,B01000000,B11000000};
   byte SQUARE015[] = {B11000000,B01000000,B01000000,B01000000,B01000000,B01000000,B01000000,B11000000};
   byte SQUARE016[] = {B10000000,B10000000,B10000000,B10000000,B10000000,B10000000,B10000000,B10000000};
   byte SQUARE017[] = {B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000};


             // TERAZ IDE "TROJUHOLNÍK"
   byte TRIANGLE001[] = {B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000};
   byte TRIANGLE002[] = {B00000000,B00000000,B00000000,B00000000,B00000001,B00000001,B00000000,B00000000};
   byte TRIANGLE003[] = {B00000000,B00000000,B00000000,B00000001,B00000011,B00000011,B00000000,B00000000};
   byte TRIANGLE004[] = {B00000000,B00000001,B00000011,B00000110,B00001100,B00001111,B00000000,B00000000};
   byte TRIANGLE005[] = {B00000000,B00000011,B00000111,B00001100,B00011000,B00011111,B00000000,B00000000};
   byte TRIANGLE006[] = {B00000000,B00000110,B00001111,B00011001,B00110000,B00111111,B00000000,B00000000};
   byte TRIANGLE007[] = {B00000000,B00001100,B00011110,B00110011,B01100001,B01111111,B00000000,B00000000};
   byte TRIANGLE008[] = {B00000000,B00011000,B00111100,B01100110,B11000011,B11111111,B00000000,B00000000};
   byte TRIANGLE009[] = {B00000000,B00110000,B01111000,B11001100,B10000110,B11111110,B00000000,B00000000};
   byte TRIANGLE010[] = {B00000000,B01100000,B11110000,B10011000,B00001100,B11111100,B00000000,B00000000};
   byte TRIANGLE011[] = {B00000000,B11000000,B11100000,B00110000,B00011000,B11111000,B00000000,B00000000};
   byte TRIANGLE012[] = {B00000000,B10000000,B11000000,B01100000,B00110000,B11110000,B00000000,B00000000};
   byte TRIANGLE013[] = {B00000000,B00000000,B10000000,B11000000,B01100000,B11100000,B00000000,B00000000};
   byte TRIANGLE014[] = {B00000000,B00000000,B00000000,B10000000,B11000000,B11000000,B00000000,B00000000};
   byte TRIANGLE015[] = {B00000000,B00000000,B00000000,B00000000,B10000000,B10000000,B00000000,B00000000};
   byte TRIANGLE016[] = {B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000};

            // TERAZ IDA "ČAU"
   byte C[] = {B00101000,B00010000,B00000000,B00111000,B01000100,B01000000,B01000100,B00111000};
   byte A[] = {B00011000,B00111100,B00100100,B01100110,B11000011,B10111101,B10000001,B00000000};
   byte U[] = {B00000000,B01000010,B01000010,B01000010,B01000010,B01100110,B00111100,B00000000};

            //TERAZ napíše "TVAR"
byte TVAR001[] = {B11111111,B01100110,B01100110,B00000000,B10011001,B01000010,B00100100,B00011000};
//byte TVAR001[] = {
//byte TVAR001[] = {
//byte TVAR001[] = {
//byte TVAR001[] = {
//byte TVAR001[] = {
//byte TVAR001[] = {
//byte TVAR001[] = {
//byte TVAR001[] = {
//byte TVAR001[] = {
//byte TVAR001[] = {
//byte TVAR001[] = { 

    //Teraz napíše "TROJUHOLNÍK"

   printByte(TRIANGLE001);
   delay(100);
   printByte(TRIANGLE002);
   delay(100);
   printByte(TRIANGLE003);
   delay(100);
   printByte(TRIANGLE004);
   delay(100);
   printByte(TRIANGLE005);
   delay(100);
   printByte(TRIANGLE006);
   delay(100);
   printByte(TRIANGLE007);
   delay(100);
   printByte(TRIANGLE008);
   delay(100);
   printByte(TRIANGLE009);
   delay(100);
   printByte(TRIANGLE010);
   delay(100);
   printByte(TRIANGLE011);
   delay(100);
   printByte(TRIANGLE012);
   delay(100);
   printByte(TRIANGLE013);
   delay(100);
   printByte(TRIANGLE014);
   delay(100);
   printByte(TRIANGLE015);
   delay(100);
   printByte(TRIANGLE016);
   delay(100);

   //Teraz napíše "KRUH"

   printByte(CIRCLE001);
   delay(100);
   printByte(CIRCLE002);
   delay(100);
   printByte(CIRCLE003);
   delay(100);
   printByte(CIRCLE004);
   delay(100);
   printByte(CIRCLE005);
   delay(100);
   printByte(CIRCLE006);
   delay(100);
   printByte(CIRCLE007);
   delay(100);
   printByte(CIRCLE008);
   delay(100);
   printByte(CIRCLE009);
   delay(100);
   printByte(CIRCLE010);
   delay(100);
   printByte(CIRCLE011);
   delay(100);
   printByte(CIRCLE012);
   delay(100);
   printByte(CIRCLE013);
   delay(100);
   printByte(CIRCLE014);
   delay(100);
   printByte(CIRCLE015);
   delay(100);
   printByte(CIRCLE016);
   delay(100);
   printByte(CIRCLE017);
   delay(100);

    //Teraz napíše IKSKO "X"

  //printByte(X001);
  //delay(500);
   printByte(X002);
   delay(100);
   printByte(X003);
   delay(100);
   printByte(X004);
   delay(100);
   printByte(X005);
   delay(100);
   printByte(X006);
   delay(100);
   printByte(X007);
   delay(100);
   printByte(X008);
   delay(100);
   printByte(X009);
   delay(100);
   printByte(X010);
   delay(100);
   printByte(X011);
   delay(100);
   printByte(X012);
   delay(100);
   printByte(X013);
   delay(100);
   printByte(X014);
   delay(100);
   printByte(X015);
   delay(100);
   printByte(X016);
   delay(100);
   printByte(X017);
   delay(100);

    //Taraz napíše "ŠTVOREC"

   printByte(SQUARE001);
   delay(100);
   printByte(SQUARE002);
   delay(100);
   printByte(SQUARE003);
   delay(100);
   printByte(SQUARE004);
   delay(100);
   printByte(SQUARE005);
   delay(100);
   printByte(SQUARE006);
   delay(100);
   printByte(SQUARE007);
   delay(100);
   printByte(SQUARE008);
   delay(100);
   printByte(SQUARE009);
   delay(100);
   printByte(SQUARE010);
   delay(100);
   printByte(SQUARE011);
   delay(100);
   printByte(SQUARE012);
   delay(100);
   printByte(SQUARE013);
   delay(100);
   printByte(SQUARE014);
   delay(100);
   printByte(SQUARE015);
   delay(100);
   printByte(SQUARE016);
   delay(100);
   printByte(SQUARE017);
   delay(100);

    //Teraz napíše "ČAU"

   printByte(C);
   delay(500);
   printByte(A);
   delay(500);
   printByte(U);
   delay(500);

    //TERAZ IDE "TVAR"
   printByte(TVAR001);
   delay(2000);
   //printByte(TVAR002);
   //printByte(TVAR003);
   //printByte(TVAR004);
   //printByte(TVAR005);
   //printByte(TVAR006);
   //printByte(TVAR007);
   //printByte(TVAR008);
   //printByte(TVAR009);
   //printByte(TVAR010);
   //printByte(TVAR011);
   //printByte(TVAR012);

}

void printByte(byte character[]) {
  int i = 0;
  for (i = 0; i < 8; i++) {
    lc.setRow(0, i, character[i]);
  }
}
